[{"C:\\Users\\27000\\Desktop\\Parser\\src\\index.js":"1","C:\\Users\\27000\\Desktop\\Parser\\src\\App.js":"2","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Main.js":"3","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Header.js":"4","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Dashboard.js":"5","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Parser\\Parser.js":"6","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Parser\\styles.js":"7","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Parser\\ParsedSumm.js":"8","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\CopiedToCBAlert.js":"9"},{"size":264,"mtime":1611683128132,"results":"10","hashOfConfig":"11"},{"size":426,"mtime":1611773001859,"results":"12","hashOfConfig":"11"},{"size":1505,"mtime":1611773019964,"results":"13","hashOfConfig":"11"},{"size":1018,"mtime":1611677175685,"results":"14","hashOfConfig":"11"},{"size":937,"mtime":1611677739695,"results":"15","hashOfConfig":"11"},{"size":6478,"mtime":1611761030135,"results":"16","hashOfConfig":"11"},{"size":1430,"mtime":1611924572896,"results":"17","hashOfConfig":"11"},{"size":1376,"mtime":1611761057558,"results":"18","hashOfConfig":"11"},{"size":540,"mtime":1611761608644,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1s2jdpv",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\27000\\Desktop\\Parser\\src\\index.js",[],["40","41"],"C:\\Users\\27000\\Desktop\\Parser\\src\\App.js",[],"C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Main.js",[],"C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Header.js",[],"C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Dashboard.js",[],"C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Parser\\Parser.js",["42","43"],"import React, { useRef, useState } from 'react';\r\nimport {\r\n  Container,\r\n  Toolbar,\r\n  TextField,\r\n  Typography,\r\n  Box,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  Switch,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  IconButton,\r\n  List,\r\n} from '@material-ui/core';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport numberToWordsRu from 'number-to-words-ru';\r\nimport { useForm } from 'react-hook-form';\r\nimport useStyles from './styles';\r\nimport ParsedSumm from './ParsedSumm';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport CopiedToCBAlert from '../CopiedToCBAlert';\r\n\r\nconst splitters = {\r\n  rub: ' руб',\r\n  usd: ' дол',\r\n  eur: ' евр',\r\n};\r\n\r\nconst Parser = () => {\r\n  const classes = useStyles();\r\n  const { handleSubmit, register, errors } = useForm({\r\n    mode: 'onChange',\r\n  });\r\n  const summInput = useRef();\r\n  const [withVAT, setWithVAT] = useState(false);\r\n  const [summ, setSumm] = useState('');\r\n  const [VAT, setVAT] = useState(20);\r\n  const [currency, setCurrency] = useState('rub');\r\n  const [parsedList, setParsedList] = useState([]);\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  const handleInputChange = ({ target: { value } }) => {\r\n    let numbersOnly = value.replace(/[^0-9.,]+/gm, '');\r\n    if (numbersOnly) {\r\n      numbersOnly = numbersOnly.match(/^\\d+([\\.,]?\\d?\\d?)/gm)[0].slice(0, 25);\r\n      setSumm(numbersOnly.replace(/,+/gm, '.'));\r\n    } else {\r\n      setSumm(numbersOnly);\r\n    }\r\n    summInput.current.value = numbersOnly;\r\n  };\r\n  const handleCheckVAT = ({ target }) => {\r\n    setWithVAT(target.checked);\r\n  };\r\n  const handleVAT = ({ target }) => {\r\n    setVAT(target.value);\r\n  };\r\n  const handleCurrency = ({ target }) => {\r\n    setCurrency(target.value);\r\n  };\r\n  const parseSumm = (summ) => {\r\n    const parsed = numberToWordsRu.convert(summ, { currency });\r\n    const splitter = splitters[currency];\r\n    return `(${parsed.split(splitter).join(`)${splitter}`)}`;\r\n  };\r\n  const format = (num) => num.replace(/(\\.\\d{2})\\d*/, '$1').replace(/(\\d)(?=(\\d{3})+\\b)/g, '$1 ');\r\n  const finalizeResult = (summ) => {\r\n    if (!summ) return;\r\n    const baseResult = `${format(summ)} ${parseSumm(summ)}`;\r\n    const VATsumm = summ ? summ - summ / (VAT / 100 + 1) : null;\r\n    const isVATChecked = withVAT\r\n      ? ` включая НДС (${VAT}%) в сумме ${format(VATsumm.toFixed(2))} ${parseSumm(VATsumm)}`\r\n      : '';\r\n    const joinedResult = [baseResult, isVATChecked].filter(Boolean).join().replace(/\\./gm, ',');\r\n    return `${joinedResult}.`;\r\n  };\r\n  const onSubmit = (data) => {\r\n    const parsed = finalizeResult(summ);\r\n    setParsedList([...parsedList, parsed]);\r\n  };\r\n  const deleteParsedItem = (i) => {\r\n    setParsedList((state) => {\r\n      return state.filter((el, ind) => ind !== i);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Container className={classes.container}>\r\n        <Toolbar />\r\n        <Box className={classes.inputBox}>\r\n          <form onSubmit={handleSubmit(onSubmit)} className={classes.form} noValidate>\r\n            <TextField\r\n              label='Введите сумму'\r\n              name='summ'\r\n              autoComplete='off'\r\n              fullWidth\r\n              autoFocus\r\n              className={classes.input}\r\n              InputProps={{ inputProps: { ref: summInput } }}\r\n              onChange={handleInputChange}\r\n              inputRef={register({\r\n                pattern: {\r\n                  value: /^[\\d.,]+$/,\r\n                  message: 'Только цифры',\r\n                },\r\n                maxLength: {\r\n                  value: 20,\r\n                  message: 'Ну перестань!',\r\n                },\r\n              })}\r\n              error={!!errors.summ}\r\n              helperText={errors.summ ? errors.summ.message : null}\r\n            />\r\n            <IconButton type='submit' aria-label='close' className={classes.addButton}>\r\n              <Icon color='primary'>add_circle</Icon>\r\n            </IconButton>\r\n            <FormControl className={classes.currency}>\r\n              <InputLabel id='demo-simple-select-helper-label'>Валюта</InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-helper-label'\r\n                id='demo-simple-select-helper'\r\n                value={currency}\r\n                onChange={handleCurrency}\r\n              >\r\n                <MenuItem value={'rub'}>₽</MenuItem>\r\n                <MenuItem value={'usd'}>$</MenuItem>\r\n                <MenuItem value={'eur'}>€</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </form>\r\n          <Box className={classes.VATBox}>\r\n            <FormControlLabel\r\n              control={\r\n                // <Checkbox checked={withVAT} onChange={handleCheckVAT} name='withVAT' color='primary' />\r\n                <Switch checked={withVAT} onChange={handleCheckVAT} name='withVAT' color='primary' />\r\n              }\r\n              label='с НДС'\r\n            />\r\n            <FormControl\r\n              className={classes.VATValue}\r\n              style={{ visibility: `${withVAT ? 'visible' : 'hidden'}` }}\r\n            >\r\n              <InputLabel id='demo-simple-select-helper-label'>НДС, %</InputLabel>\r\n              <Select\r\n                labelId='demo-simple-select-helper-label'\r\n                id='demo-simple-select-helper'\r\n                value={VAT}\r\n                onChange={handleVAT}\r\n              >\r\n                {/* {Array(20).fill(0).map((el,i) => <MenuItem key={i} value={++i}>{`${++i}%`}</MenuItem>)} */}\r\n                <MenuItem value={20}>20%</MenuItem>\r\n                <MenuItem value={18}>18%</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Box>\r\n        </Box>\r\n        {summ && (\r\n          <CopyToClipboard text={finalizeResult(summ)} onCopy={() => setIsCopied(true)}>\r\n            <Typography className={classes.result}>{finalizeResult(summ)}</Typography>\r\n          </CopyToClipboard>\r\n        )}\r\n\r\n        {parsedList.length > 0 && (\r\n          <List>\r\n            {parsedList.map((s, i) => (\r\n              <ParsedSumm key={i} text={s} deleteItem={() => deleteParsedItem(i)} />\r\n            ))}\r\n          </List>\r\n        )}\r\n      </Container>\r\n      <CopiedToCBAlert open={isCopied} \r\n      onClose={() => setIsCopied(false)} \r\n      autoHideDuration={2000} \r\n      elevation={6}\r\n      variant=\"filled\" \r\n      severity='success'\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Parser;\r\n","C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Parser\\styles.js",[],"C:\\Users\\27000\\Desktop\\Parser\\src\\components\\Parser\\ParsedSumm.js",[],"C:\\Users\\27000\\Desktop\\Parser\\src\\components\\CopiedToCBAlert.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":9,"column":3,"nodeType":"50","messageId":"51","endLine":9,"endColumn":11},{"ruleId":"52","severity":1,"message":"53","line":48,"column":46,"nodeType":"54","messageId":"55","endLine":48,"endColumn":47,"suggestions":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["59","60"],"no-global-assign","no-unsafe-negation",{"messageId":"61","fix":"62","desc":"63"},{"messageId":"64","fix":"65","desc":"66"},"removeEscape",{"range":"67","text":"68"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"69","text":"70"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1324,1325],"",[1324,1324],"\\"]